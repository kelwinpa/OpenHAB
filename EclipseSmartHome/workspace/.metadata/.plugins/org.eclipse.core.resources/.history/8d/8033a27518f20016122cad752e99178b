import java.util.Date
import java.text.SimpleDateFormat
import org.openhab.core.library.types.*
 
//High-level goals variables
var String url = 'high_level_goals.conf'
var String electricity_goal = null
var String temp_goal = null
var Number threshold //if goal is of temperature
var Date date_beg = null
var Date date_end = null

var boolean isdaytime = false

var Timer windowsAlarm = null

rule Startup
when
	System started
then
	logDebug( "mylogs", "STARTING DECISION.RULES...." )
	val fileReader = new java.io.FileReader(url)
	try {
		var String lastGoal = ""
	    val values = new java.io.BufferedReader(fileReader) 
	
		var String s = values.readLine
		while (s != null) {
		    logDebug( "mylogs", "READ FROM FILE: " + s)
			
			if(s.contains("ELEC")) {
				electricity_goal = s
			}
			if(s.contains("KEEP")) {
				temp_goal = s
			}
			if(s.equals("WINDOW") || s.contains("KEEP") || s.contains("ELEC")) {
				lastGoal = s
				logDebug( "mylogs", "LAST GOAL: " + s)
			}
			else {
				if(lastGoal.equals("WINDOW")) {
					if(date_beg == null) {
						date_beg = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_BEG")
					} else {
						date_end = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_END")
					}
				}
				else if(lastGoal.contains("KEEP")) {
					threshold = Float::parseFloat(s)
					logDebug( "mylogs", "SET TRHESHOLD")
				}
			}
			s = values.readLine
		}
		} finally {
		    try { fileReader.close() } catch (Exception e) {}
		}
	logDebug( "mylogs", electricity_goal )
	logDebug( "mylogs", threshold.toString )
	logDebug( "mylogs", date_beg.toString )
	logDebug( "mylogs", date_end.toString )
	logDebug( "mylogs", "END DECISION.RULES...." )
end

//Temperature
rule "Increase temperature - threashold reached"
when
	Item Temperature received update
then
	logDebug( "mylogs", "Increase temperature. threshold = "+threshold )
	// Plan: if temperature < threshold => increase it
	if(Temperature.state instanceof DecimalType) {
		var Number temp = Temperature.state as DecimalType
		if(temp < threshold && temp_goal != null) {
			var boolean candoit = true;
			if(temp_goal.contains("FRESH") && isdaytime) {
				 candoit = false;
			}
			if(candoit) {
				//say execute to increase temperature and close windows
				logDebug( "mylogs", "Asking to Execution.jar" )
				val results = executeCommandLine("java -jar Execution.jar \"increase temperature\" \"" + threshold + "\"", 5000)
				logDebug( "mylogs", "RESULTS=" + results )
			}
		}
	}
end


//Windows
rule "Open windows and balconies"
when
	 Time cron "0 * * * * ?"  //every minute
then
	//(see conflicts set (keep house warm && open windows):
	//if the current temperature of the house is less than the user-determined threshold,
	//then windows/balconies must stay closed.
	var Number temp = Temperature.state as DecimalType
	var boolean candoit = true
	if(temp_goal.contains("WARM") && temp < threshold)
		candoit = false
	

	//if high-level goal for windows is specified, open them all at the requested hour
	if(date_beg != null && date_end != null && candoit) { //conflict between
		logDebug("mylogs", "NOT NULL" )
		
		var Date date = new Date();
		var String now = new SimpleDateFormat("HH:mm").format(date)
		var String date_beg_string = new SimpleDateFormat("HH:mm").format(date_beg)
		var String date_end_string = new SimpleDateFormat("HH:mm").format(date_end)
		logDebug("mylogs", "NOW DATE: " + now)
		logDebug("mylogs", "DATE_BEG: " + date_beg_string)
		logDebug("mylogs", "DATE_END: " + date_end_string) 
		if(date_beg_string.equals(now)) {
			
			//open all windows
			postUpdate(Windows_Number, 6);
			postUpdate(Windows_LivingRoom, 2);
			postUpdate(Windows_Kitchen, 2);
			postUpdate(Windows_SleepingRoom, 1);
			postUpdate(Windows_Bathroom, 1);
			postUpdate(LivingRoom_Windows_l1, ON);
			postUpdate(LivingRoom_Windows_l2, ON);
			postUpdate(Kitchen_Windows_l1, ON);
			postUpdate(Kitchen_Windows_l2, ON);
			postUpdate(SleepingRoom_Windows_l1, ON);
			postUpdate(Bathroom_Windows_l1, ON);
	
			//notify this to execution
			val results = executeCommandLine("java -jar Execution.jar \"open windows\"", 5000)
			logDebug( "mylogs", "RESULTS=" + results )
		}
		
		//if high-level goal for windows is specified, close them all at the requested hour
		if(date_end_string.equals(now)) {
			//close all windows
			postUpdate(Windows_Number, 0);
			postUpdate(Windows_LivingRoom, 0);
			postUpdate(Windows_Kitchen, 0);
			postUpdate(Windows_SleepingRoom, 0);
			postUpdate(Windows_Bathroom, 0);
			postUpdate(LivingRoom_Windows_l1, OFF);
			postUpdate(LivingRoom_Windows_l2, OFF);
			postUpdate(Kitchen_Windows_l1, OFF);
			postUpdate(Kitchen_Windows_l2, OFF);
			postUpdate(SleepingRoom_Windows_l1, OFF);
			postUpdate(Bathroom_Windows_l1, OFF);
	
			//notify this to execution
			val results = executeCommandLine("java -jar Execution.jar \"close windows\"", 5000)
			logDebug( "mylogs", "RESULTS=" + results )	
		}
	}
end

rule "Turn window on"
when
	Item LivingRoom_Windows_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(LivingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"LivingRoom_Windows_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn window on"
when
	Item LivingRoom_Windows_l2 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(LivingRoom_Windows_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"LivingRoom_Windows_l2\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn window on"
when
	Item Kitchen_Windows_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"Kitchen_Windows_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn window on"
when
	Item Kitchen_Windows_l2 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Kitchen_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"Kitchen_Windows_l2\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn window on"
when
	Item SleepingRoom_Windows_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(SleepingRoom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"SleepingRoom_Windows_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn window on"
when
	Item Bathroom_Windows_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Bathroom_Windows_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " window\" \"Bathroom_Windows_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end




rule "Turn light on"
when
	Item LivingRoom_Lights_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	logDebug("mylogs", "" + LivingRoom_Lights_l1.state )
	if(LivingRoom_Lights_l1.state == ON) todo = "open"
	logDebug("mylogs", todo)
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"LivingRoom_Lights_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l2 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(LivingRoom_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"LivingRoom_Lights_l2\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item LivingRoom_Lights_l3 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(LivingRoom_Lights_l3.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"LivingRoom_Lights_l3\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item Kitchen_Lights_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Kitchen_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"Kitchen_Lights_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item Kitchen_Lights_l2 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Kitchen_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"Kitchen_Lights_l2\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(SleepingRoom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"SleepingRoom_Lights_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item SleepingRoom_Lights_l2 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(SleepingRoom_Lights_l2.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"SleepingRoom_Lights_l2\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

rule "Turn light on"
when
	Item Bathroom_Lights_l1 changed
then
	//execution should make temperature increase
	var String todo = "close"
	if(Bathroom_Lights_l1.state == ON) todo = "open"
	val results = executeCommandLine("java -jar Execution.jar \"" + todo + " light\" \"Bathroom_Lights_l1\"", 5000)
	logDebug( "mylogs", "RESULTS=" + results )	
end

//Electricity
rule "Minimize electricity consumption living room"
when
	Item People_LivingRoom 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			if(People_LivingRoom.state instanceof DecimalType)
			{
				var Number peopleno = People_LivingRoom.state as DecimalType
				if(peopleno == 0) {
					val results = executeCommandLine("java -jar Execution.jar \"close lights\" \"living room\"", 5000)
					logDebug( "mylogs", "RESULTS=" + results )
				}
			}
		}
	}
	catch(InterruptedException e) {
		
    }
end

rule "Minimize electricity consumption kitchen"
when
	Item People_Kitchen 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			if(People_Kitchen.state instanceof DecimalType)
			{
				var Number peopleno = People_Kitchen.state as DecimalType
				if(peopleno == 0) {
					val results = executeCommandLine("java -jar Execution.jar \"close lights\" \"kitchen\"", 5000)
					logDebug( "mylogs", "RESULTS=" + results )
				}
			}
		}
	}
	catch(InterruptedException e) {
		 
    }
end

rule "Minimize electricity consumption sleeping room"
when
	Item People_SleepingRoom 	received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			if(People_SleepingRoom.state instanceof DecimalType)
			{
				var Number peopleno = People_SleepingRoom.state as DecimalType
				if(peopleno == 0) {
					val results = executeCommandLine("java -jar Execution.jar \"close lights\" \"sleeping room\"", 5000)
					logDebug( "mylogs", "RESULTS=" + results )
				}
			}
		}
	}
	catch(InterruptedException e) {
		
    }
end

rule "Minimize electricity consumption bathroom"
when
	Item People_Bathroom 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area if no people
		if(electricity_goal.equals("ELEC_MIN")) {
			if(People_Bathroom.state instanceof DecimalType)
			{
				var Number peopleno = People_Bathroom.state as DecimalType
				if(peopleno == 0) {
					val results = executeCommandLine("java -jar Execution.jar \"close lights\" \"bathroom\"", 5000)
					logDebug( "mylogs", "RESULTS=" + results )
				}
			}
		}
	}
	catch(InterruptedException e) {
		
    }
end

//val results = executeCommandLine("/etc/openhab/configruations/scripts/test.sh", 5000)
//logInfo("Test", results)