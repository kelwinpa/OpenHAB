import java.util.Date
import java.text.SimpleDateFormat

//High-level goals variables
var String url = 'high_level_goals.conf'
var String electricity_goal = null
var Number threshold //if goal is of temperature
var Date date_beg = null
var Date date_end = null

var Timer windowsAlarm = null

rule Startup
when
	System started
then
	logDebug( "mylogs", "STARTING DECISION.RULES...." )
	val fileReader = new java.io.FileReader(url)
	try {
		var String lastGoal = ""
	    val values = new java.io.BufferedReader(fileReader) 
	
		var String s = values.readLine
		while (s != null) {
		    logDebug( "mylogs", "READ FROM FILE: " + s)
			
			if(s.equals("WINDOW") || s.contains("KEEP") || s.contains("ELEC")) {
				lastGoal = s
				logDebug( "mylogs", "LAST GOAL: " + s)
			}
			else {
				if(lastGoal.equals("WINDOW")) {
					if(date_beg == null) {
						date_beg = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_BEG")
					} else {
						date_end = new SimpleDateFormat("HH:mm").parse(s)
						logDebug( "mylogs", "SET DATE_END")
					}
				}
				else if(lastGoal.contains("KEEP")) {
					threshold = Float::parseFloat(s)
					logDebug( "mylogs", "SET TRHESHOLD")
				}
			}
			s = values.readLine
		}
		} finally {
		    try { fileReader.close() } catch (Exception e) {}
		}
	logDebug( "mylogs", "END DECISION.RULES...." )
	logDebug( "mylogs", electricity_goal )
	logDebug( "mylogs", threshold.toString )
	logDebug( "mylogs", date_beg.toString )
	logDebug( "mylogs", date_end.toString )
end

rule "Increase temperature - threashold reached"
when
	Item Temperature received update
then
logDebug( "mylogs", "Increase temperature. threshold = "+threshold );
	// Plan: if temperature < threshold => increase it
	if(Temperature.state instanceof DecimalType) {
		var Number temp = Temperature.state as DecimalType
		if(temp < threshold) {
			//say execute to increase temperature and close windows
			logDebug( "mylogs", "Asking to Execution.jar" );
			Runtime.getRuntime().exec("java -jar Execution.jar \"increase temperature\" \"" + threshold + "\"");
			logDebug( "mylogs", "Done" );
		}
	}
end

rule "Open windows and balconies"
when
	 Time cron "0 * * * * ?"  //every minute
then
	if(date_beg != null && date_beg != null) {
		
		var Date date = new Date();
		if(date_beg.toString().equals(new SimpleDateFormat("HH:mm").format(date)) ) {
			//open all windows
			postUpdate(Windows_Number, 6);
			postUpdate(Windows_LivingRoom, 2);
			postUpdate(Windows_Kitchen, 2);
			postUpdate(Windows_SleepingRoom, 1);
			postUpdate(Windows_Bathroom, 1);
			postUpdate(LivingRoom_Windows_l1, ON);
			postUpdate(LivingRoom_Windows_l2, ON);
			postUpdate(Kitchen_Windows_l1, ON);
			postUpdate(Kitchen_Windows_l2, ON);
			postUpdate(SleepingRoom_Windows_l1, ON);
			postUpdate(Bathroom_Windows_l1, ON);
	
			//notify this to execution
			//execution should make temperature decrease
			
			
		}
		
		if(date_end.toString().equals(new SimpleDateFormat("HH:mm").format(date)) ) {
			//close all windows
			postUpdate(Windows_Number, 0);
			postUpdate(Windows_LivingRoom, 0);
			postUpdate(Windows_Kitchen, 0);
			postUpdate(Windows_SleepingRoom, 0);
			postUpdate(Windows_Bathroom, 0);
			postUpdate(LivingRoom_Windows_l1, OFF);
			postUpdate(LivingRoom_Windows_l2, OFF);
			postUpdate(Kitchen_Windows_l1, OFF);
			postUpdate(Kitchen_Windows_l2, OFF);
			postUpdate(SleepingRoom_Windows_l1, OFF);
			postUpdate(Bathroom_Windows_l1, OFF);
	
			//notify this to execution
			//execution should make temperature increase
			
		}
	}
end


/*
//Keep house warm/fresh
rule "Keep house fresh (start daytime)"
when
	
then
	
end

rule "Keep house fresh (end daytime)"
when
	
then
	//say execution not
end */

//Electricity
rule "Minimize electricity consumption living room"
when
	Item People_LivingRoom 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			
		}
	}
	catch(InterruptedException e) {
		
    }
end

rule "Minimize electricity consumption kitchen"
when
	Item People_Kitchen 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			
		}
	}
	catch(InterruptedException e) {
		
    }
end

rule "Minimize electricity consumption sleeping room"
when
	Item People_SleepingRoom 	received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			
		}
	}
	catch(InterruptedException e) {
		
    }
end

rule "Minimize electricity consumption bathroom"
when
	Item People_Bathroom 		received update
then
	try {
		Thread::sleep(1000)
		//say execution to close light within this area
		if(electricity_goal.equals("ELEC_MIN")) {
			
		}
	}
	catch(InterruptedException e) {
		
    }
end

//val results = executeCommandLine("/etc/openhab/configruations/scripts/test.sh", 5000)
//logInfo("Test", results)


//change to do: aggiungere variabile per dire se c'Ã¨ optimize energy consumption o minimize. necessario per check nelle ultime rules